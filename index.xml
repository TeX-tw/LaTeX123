<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>大家來學 LaTeX</title><link>https://textw.github.io/LaTeX123/</link><description>Recent content on 大家來學 LaTeX</description><generator>Hugo -- gohugo.io</generator><language>zh-Hant</language><atom:link href="https://textw.github.io/LaTeX123/index.xml" rel="self" type="application/rss+xml"/><item><title>第 01 章：先來說一些故事</title><link>https://textw.github.io/LaTeX123/docs/story/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/story/</guid><description>1. 先來說一些故事 # \(\TeX\) 是 Donald E. Knuth 教授的精心傑作，它是個功能非常強大的幕後排版系統，含有彈性很大，而且很低階的排版語言。當初，是因為 Knuth 教授在寫他的大著 TAOCP (The Art of Computer Programming) 時，發覺書商把他書中的數學式子排得太難看了，於是決定自行開發一個非常適合排數學式子的排版語言，這就是 \(\TeX\) 系統的來由。
不僅僅是談到 \(\TeX\) 一定會提到 Knuth 教授，只要提到排版，沒有人可以忽略他的 \(\TeX\) 所帶來的變革、影響，甚至 \(\TeX\) 已經 20 幾歲了，仍然深深影響著排版界及排版軟體，可見這個排版軟體真的是非同小可。
1.1 Knuth 教授的生平簡介 # 1938.01.10 誕生。Milwaukee, Wisconsin; U.S. citizen。 1956 進入凱思工學院（Case Institute of Technology）學習物理。 1960 畢業後進入加州理工學院（California Institute of Technology）研究所，此時轉向數學領域的研究方向。 1961.</description></item><item><title>第 02 章：行前準備</title><link>https://textw.github.io/LaTeX123/docs/preparation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/preparation/</guid><description>2. 行前準備 # 使用 \(\TeX/\LaTeX\) 系統，剛開始，比較麻煩的是安裝問題。不過，以現在的作業系統而言，幾乎較流行的作業系統都有現成包好的 \(\TeX\) 系統套件可以安裝，例如 Un*x 系統的 teTeX、Windows 系統的 MiKTeX 及 fpTeX。另外，也有 TeX Live CD 可以供下載、購買，這是 TUG ( \(\TeX\) User Group)1製作的各種作業系統的可執行檔，使用上相當方便。
目前所謂的 \(\TeX\) 套件，是把原來的 \(\TeX\) 排版引擎本身，加上 \(\LaTeX\) 及其他相關的巨集，再加上字型軟體（Metafont）、繪圖程式（MetaPost）、字型檔……等等，所組合成的一整個可實際運作的排版系統。因此，什麼是 TeX？會因使用的場合不同而有不同的意義，一般純指指令本身的時候，就單純寫成小寫的 tex，此時所用的巨集，預設就是 Knuth 教授所寫的 plain \(\TeX\) 。寫成 \(\TeX\) 時，一般是指整個系統而言。這在 \(\LaTeX\) 巨集亦同，latex 指的是指令， \(\LaTeX\) 指的是整個巨集系統。
2.1 Unix-like 系統 # 一般 Unix-like 系統都是安裝 teTeX 套件，凡是和 tetex 字樣相關的 packages 都安裝起來，目前 GNU/Linux 各種 distribution 及 FreeBSD 都有現成的 packages 供安裝使用。如果是沒有提供這個套件的作業系統，可能得自行編譯了，原始碼在：</description></item><item><title>第 03 章：TeX/LaTeX 語法概說</title><link>https://textw.github.io/LaTeX123/docs/syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/syntax/</guid><description>3. TeX/LaTeX 語法概說 # 這一章要談的是，和一般的純文字文稿及其他 markup 式文件系統在語言上的一般差異性。為了讓觀念上能夠更清楚，以下所述主要是要在命令列執行的，致於編輯器上方便的按鍵及巨集，這裡就不多談，一方面是每個人使用的編輯器不一樣，二方面是要先把黑盒子拿掉，整個處理流程才會有概念。
當然，由於完全還沒有開始實際寫文稿來測試，所以，這章是紙上談兵，不必動手，用看的就好。但，別急，我們會在 第 04 章 開始實際玩看看，請別忘了，到時要再回頭來複習一下這些資料。
而且，前面已經說過，這篇文章主要是著眼於 \(\LaTeX\) 所附上的巨集，一些其他方便的套件引用，將會在最後或另文再來談。其實，不引用任何外來特殊套件，讓 \(\LaTeX\) 本身去處理，最起碼也就不會太離譜，要講求美觀、微調，個人是認為先把基礎弄起來再說，有些套件的複雜程度，會令人頭疼，你是不是真有這個需要，值得考慮。而且，很多時候自認為不錯的「微調」，其實常常會不合排版的慣例。 \(\TeX/\LaTeX\) 的語法，可以是很簡單明白，也可以是相當的複雜，這是 \(\TeX\) 系統本身的彈性所導致。
3.1 LaTeX 文稿的處理流程 # 最簡單的一句話，就是把編輯器編輯好的文稿（通常結尾是 .tex），利用 latex 這個指令去編譯文稿就對了！
$ latex your.tex 需要注意的是，如果有索引，還要用 makeindex 執行一次，有參考文獻，還需要 bibtex 處理一次，最後再使用 latex 再處理一至二次，也就是說視文稿的複雜程度，latex 可能需要執行好幾次，這在往後碰到時會再提出來。另外，處理中文的話，需要其他前置處理，這裡暫時先以英文文稿來說明，中文的部份，只要加入中文環境及（或）改用能處理中文的前置處理器就可以了。
這樣經過 latex 處理後，會產生一個 your.dvi 檔，然後可以使用 dvips 來產生 POSTSCRIPT 格式的檔案。也可以使用 dvipdfm[x] 來產生 PDF 的格式，當然，也可以使用 ps2pdf 經由 POSTSCRIPT 格式轉換成 PDF 格式。另外，也可由 pdflatex 由 your.</description></item><item><title>第 04 章：實際上排版玩看看</title><link>https://textw.github.io/LaTeX123/docs/start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/start/</guid><description>4. 實際上排版玩看看 # 好了，現在正式來玩看看吧！本章主要是簡單的實例說明，先進入狀況再談其他。實際應用比高談闊論有用多了。
先來個「最高指導原則」：學會控制空間，你就學會排版了！剛學排版的朋友，往往會把所學到的東西去想法子佈滿你所有的空間（就是一個頁面），但實際上，你要調整的，其實是各個部份的空間配置，抽象一點說，也就是一整個頁面當中，沒有文字、圖表的部份才是排版真正的重點。你先聽聽就好，過一段時間的熟悉後，再來回頭思考這個「玩弄」空間的原則。:-)
由於本文有 HTML 版本，為了轉換上不造成失真，實例的部份，文稿上只寫程式碼，結果的部份都是編譯好的 PDF 格式檔案，置放於網站上，可線上閱覽或下載，簡單的例子則不另製作獨立的 PDF 檔，請參閱本文的 PDF 格式檔案內容。
4.1 簡單的實例 # 這裡就把前一章所談到的一些內容整理成一個文稿，先來試試看，這裡先使用 report 類別文稿，因為 article 類別文稿是沒有 chapter 的：
% example1.tex \documentclass{report} \begin{document} This is my first {\LaTeX} typesetting example.\\ This is my first \LaTeX{} typesetting example.\\ This is my first \LaTeX\ typesetting example.\\ I am Mr. Edward G.J. Lee, G.J. is a abbreviation of my name.\\ I am Mr.\ Edward G.J. Lee, G.</description></item><item><title>第 05 章：空間與位置</title><link>https://textw.github.io/LaTeX123/docs/space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/space/</guid><description>5. 空間與位置 # 前一章曾提到過，學會控制空間就學會排版了！Knuth 教授在他的 The TeXbook 一書中也曾形容使用 \(\TeX\) 排版的情形：一個版面就像一個含有膠水（glue）的頁面，然後每一個要排版的內容就是各種不同的 box，在這些 box 還沒有固定正確位置時，都是可以移動的（膠水還沒有乾），一旦排版完成，膠水就乾了，於是每個 box 的位置就固定無法再移動了，除非又從頭再來。
一個字母、一個單字、一個句子、一個段落、一個符號、一個圖形、一個表格都可能構成一個 \(\TeX\) 的 box，甚至 box 中還有 box 的情形。這章想討論的，就是這個 box 如何安置他們到正確的位置，讓每個 box 之間的空間都能達到恰到好處，所以，到底是在控制 boxes 的屬性、位置，還是調整 glue 的空間，就看各位怎麼去看待了（請注意，box 不一定是可見的！在 \(\TeX\) 裡頭，glue 是可以調整的。）。
我們前面所討論到的英文句點後空白的調整、italic correction、\linespread 及 \parindent 這些都是在調整 glue。通常，在 \(\LaTeX\) 系統裡頭，指定單位常常不會是絕對固定的，會視情形做小限度的自動微調，這是版面空間配置上的需要。
5.1 LaTeX 中使用的度量單位 # 要精確描述和調整 \(\LaTeX\) 中的空間及位置，我們必需要有個標準的度量單位。以下都是在 \(\LaTeX\) 常會用到的單位。這裡有絕對單位及相對單位之分，除非必要，不然，一般是建議使用相對單位，原因是，他會隨著文稿字型大小改變時跟著做適當的調整。當然，在很講求精確、固定大小的顯示時，就得使用絕對單位了。
這裡如果是閱覽 HTML 格式版本，請另參考 PDF 格式版本，以免表示上失真。以下表格中所畫出來的長度僅供參考用。</description></item><item><title>第 06 章：LaTeX 的標準文稿類別</title><link>https://textw.github.io/LaTeX123/docs/class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/class/</guid><description>6. LaTeX 的標準文稿類別 # 這章主要是在說明 \(\LaTeX\) 文稿的類別（document class）1，這是 \(\LaTeX\) 規範文稿整體結構的方法。使用 class 的用意，就是把版面結構處理和實際文稿分開，這樣的最大好處就是維持整篇文章排版結構上的一致性，也使文稿內容更清爽簡潔，使用者只要專心於文稿內容的寫作即可，如果 class 定義的好，也可以達到一文多變化又不變更文稿內容的目的，只要把引用的 class 換成別的就可以了，其他的可以不必更動。
目前， \(\LaTeX\) 有五種標準類別用於一般文件，可用於一般的書信、雜誌、期刊、報告及論文。但有些期刊、論文會要求一定的結構，這時得依需求另行訂定。因此，也有其他的類別存在，標準類別並不是唯一的。甚至，也可以自行撰寫自己的文稿類別。當然，我們一般使用是不需要這麼講究，這裡只介紹 \(\LaTeX\) 的標準類別。而且，如果有和他人交換文稿的需求時，我們應該盡可能的使用流通性較廣泛的類別。
另外，也有一些是關於 \(\LaTeX\) 說明文件及 macro 寫作時要用到的類別，這些已超出本篇文章的範圍。
6.1 LaTeX 類別的宣告 # \(\LaTeX\) 的類別，要在文稿的一開頭時就宣告（當然，其上有註解是沒有關係的），他的一般格式如下：
\documentclass[選擇性參數]{類別} 選擇性參數是可以省略的，但類別名稱則不能省，一定要指定一個類別。而且只能只有一個類別。
6.2 類別的選擇性參數 # 選擇性參數可以選擇多個，各個選項是以逗點分開的。
10pt, 11pt, 12pt
指定內文一般正常字的大小，預設是 10pt。其他點數沒有外來 package 的幫忙不能指定。
a4paper, letterpaper, b5paper, executivepaper, legalpaper
指定紙張大小，預設是 letterpaper。</description></item><item><title>第 07 章：巨集套件</title><link>https://textw.github.io/LaTeX123/docs/package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/package/</guid><description>7. 巨集套件 # \(\LaTeX\) 系統已經好久沒有更新，有些部份可能會跟不上實際的腳步，而且有些內定的巨集定義，經過大家的使用，發覺並不是那麼的順手，尤其是功能的強化方面，因此這章談談如何引用他人已經寫好的巨集，這很重要，盡量避免重複製造輪子，寫 \(\TeX/\LaTeX\) macro 可說是很專業的工作，要避免破壞了整體的結構，所以先找看看有什麼巨集套件可以使用。
7.1 一般套件的使用 # 我們曾在第 3.4.3 小節，頁 [*]，提到過簡單巨集的引用，事實上，有些巨集含有許多的參數來做微調，但是每個巨集套件的參數都不會一樣，因此，使用套件之前要先看一看他所附上的使用手冊。幾乎大部份的巨集套件都有使用手冊，如果是系統上就有的巨集，那麼這些文件通常會放在：
$TEXMF/doc =&amp;gt; Unix-like 系統 $TEXMF\doc =&amp;gt; DOS/Windows 系統 這些目錄底下，這些文件會有原始 \(\TeX/\LaTeX\) 文稿，也有編譯好的 *.dvi 或 POSTSCRIPT 檔可以閱覽，為求方便的話，可以將他們轉成 pdf 格式來閱覽，原因是可以以關鍵字來搜尋全文，在查指令、環境時會比較方便。在 Unix-like 系統或 Windows 下的 cygwin 環境的話，可以使用 texdoc 這個指令來閱覽，例如：
$ texdoc amsguide # 閱覽 amsguide.dvi 這個檔的說明 $ texdoc -s ams # 查系統上所有含 ams 字樣的文件 7.2 LaTeX 官方文件中的標準巨集套件 # 底下是 \(\LaTeX\) 官方文件中所附的標準巨集套件。雖然是標準巨集套件，但一般情形下，使用這些 packages 的機會並不多，都是有特殊需要時才會引入。</description></item><item><title>第 08 章：表格的處理</title><link>https://textw.github.io/LaTeX123/docs/table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/table/</guid><description>8. 表格的處理 # 這是屬於一般人覺得比較困難，但卻是很重要的部份，讓我們多花點時間研究。 \(\LaTeX\) 的表格，因為是抽象邏輯的思考方式來製作表格，對一般使用者而言，比較不容易轉換成直觀印象。當然，有些編輯器，例如 GNU Emacs，有方便畫 \(\LaTeX\) 表格的編輯器 script，但這些我們先不去理他，先從 \(\LaTeX\) 本身表格的結構理解起，這樣在使用其他的輔助工具時也會比較得心應手，甚至沒有其他工具，只要把握住表格的大結構，製作表格就不會摸不著頭緒了。
由於 \(\LaTeX\) 內建的表格功能算有點陽春，因此這一章會介紹一些外來的巨集套件，來彌補 \(\LaTeX\) 表格功能的不足，這些巨集，使用上算相當普遍，幾乎所有的 \(\TeX\) 的各種發行版本都會附上，因此不必擔心可攜性的問題。
8.1 表格的種類 # 表格的使用，在文章上常常是必備的要件，他有歸納及醒目的作用，當然，表格太多也是會喧賓奪主。通常，我們中文的使用習慣，表格就是大方框內有小方框，文字置於小方框內，甚至某些小方框內還有斜線在分隔。為了排版上的方便及視覺表現上的美觀、清楚，在國際上大部份較正式的論文已不使用縱線、斜線，表格通常由橫線來做區隔，甚至完全沒有線條，使用空間區隔的方式。這種趨勢幾乎在二十幾年前就已開始普遍，只是國內的文件似乎還是很喜歡有縱、斜線在表格之中，好像沒有一些框線層層包住就不像表格。如非特殊的表現上的需求，我們應該朝簡化表格本身的方向走，將重點置於表格的內容及表格的邏輯結構安排，漂漂亮亮的表格外觀加上不當的內容配置，個人覺得這是個失敗的表格製作。
另外，等粗的雙線條，可能也是得盡量避免，通常粗細不等的外框雙線條有裝飾的作用，因此，如果文件是較正式的論文，那就可能要避免，如果是海報、DM 或要讓人們填寫的表格之類的，那又是另外一回事，這時封閉性的方框可能會有需要。這些規範只不過是一些慣例，並非一成不變的，得視文件的性質及使用場合來做變化，一個大原則是，如果是以文字敘述為主的文件，那麼，表格本身如果比文字內容搶眼太多的話，或許就要考慮簡化表格本身了。
我們這裡就來比較，有縱線、無縱線、完全沒有線框及含雙線表格的各種形式的表格，大家就自由心證，看哪一種表格看起來比較順眼。由於 HTML 格式在表格的表現上可能會失真，因此這裡製作成 PDF 格式供參考：
http://edt1023.sayya.org/tex/latex123/test-tables.tex http://edt1023.sayya.org/tex/latex123/test-tables.pdf
8.2 tabbing 環境 # 這是 \(\LaTeX\) 裡頭最基本的表格形式，除非自行另外定義、繪製，他並沒有方便可用的線條指令來區隔，完全使用空間、位置的配置來顯示表格內容，這時整個 tabbing 表格在 \(\LaTeX\) 的地位並不是一個最小單位的 box， \(\LaTeX\) 不會把整個表格當成一個單位來處理。所以，tabbing 表格是可以跨頁的，他可以被分成兩半來處理。因此，要和其他文字、圖表並排排版時，得另外放進一個 box 中，讓他自成一個 box 單位，例如 \parbox 或 minipage 環境裡頭。</description></item><item><title>第 09 章：圖形的處理</title><link>https://textw.github.io/LaTeX123/docs/graphic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/graphic/</guid><description>9. 圖形的處理 # \(\TeX\) 系統發展的時代，對於圖形處理還比較落後，當時，ps/eps/pdf、jpeg/png 這些圖檔都還不存在，因此這是 \(\TeX\) 本身的一個盲點，雖然有 Metafont/MetaPost 這些強大的造字、繪圖的程式，但這些工具，一般人恐怕不容易駕馭，因此，可能需要尋求更方便的外來工具。
但 \(\TeX\) 聰明的地方就是，他本身不能處理的，就預留個位置，讓其他輔助的工具來處理，所以，這也是 \(\TeX\) 20 幾歲了，還是能和新的工具配合的原因。圖形倒是還好，因為有方便的巨集及繪圖工具來處理，只要能畫的出圖來，一切都好說，而繪圖的技巧就和 \(\TeX/\LaTeX\) 本身的排版技巧不算是直接相關了。
9.1 圖形的種類 # 我們使用的圖檔，基本上分成兩大類，一是向量圖，不會因縮放而失真，一是點陣圖，會因為縮放而失真，但視使用場合，並不是所有的圖檔都適合製作成向量圖的。不管是哪一種圖形格式，都是數位化的結果，在電腦裡頭儲存的都是數字，只不過解釋過程不同而已。由於製作高品質的文件通常都使用向量圖，因此，我們將會把重點放在向量圖，尤其是 eps/pdf 格式。
9.1.1 點陣圖形 # 這種圖形應該是佔最多數的，使用也最廣泛。他是使用自然的方式來儲存數位資料，把圖形所佔的頁面想像成是許多很細小的方格子所組成，每一個小格子就代表了一個圖素（pixel），這個圖素可能代表者各種不同的顏色，只要單位小格子愈多（解析度愈高），我們人類眼睛就會分辨不出其中的各小格式間的區隔，於是影像就可以平滑的顯示出來了。
我們平常常見的圖檔格式，例如：jpeg, gif, bmp, ico, xpm, png, psd, tiff……等等都是屬於點陣圖檔。由於他是由固定大小的圖素實際數位化儲存的，所以如果他們放大或縮小，我們的眼睛就會分辨出不同，甚至放得更大些，還可以看得出「格子」出來（這會造成所謂的鋸齒狀，jaggies），原來的影像就因此失真了。
9.1.2 向量圖形 # 向量圖檔儲存的並不是實際各種圖素的資訊，而只是儲存數學運算的基本描述，顯像時再馬上計算出結果來顯示。例如，以一個圓形圖來說，他的圖檔可能只有儲存圓心所在、圓的半徑、顏色索引值等資料，要顯示時，馬上計算，然後顯像（在螢幕或印表機上，最後顯像當然仍是要轉成點陣圖的），但由於每放大、縮小時都會重新計算過，所以，就不會造成失真了。當然，這會更秏電腦資源，但以目前的電腦軟、硬體進步的情形，這些消秏都可以控制在可被忍受的範圍。
目前最常見到的向量圖檔，應該就是 eps/pdf, svg……等圖檔，向量字型也是屬於特殊格式的一種向量圖。一般比較規律性結構的圖，會比較適合使用向量圖，自然界的實體影像可能就比較適合使用點陣圖了，但科技不會把腳步停下來，將來的數位化會是怎麼樣的情形就只能用我們的想像力去填補了。
9.2 繪圖工具 # 繪圖的工具實在是太多了，這裡不可能一一介紹，只能擇要的簡單說明。我們的重點是排版，因此要知道的是圖形怎麼安置於版面裡頭才會使整個版面協調一致，而不是在繪圖教學。就請大家自行選個順手的繪圖軟體去熟悉，這類工具，大概都是一理通百理通，畫筆怎麼用簡單，要畫出像樣的圖出來會比較困難。
9.2.1 原生繪圖工具 # 這是安裝 \(\TeX/\LaTeX\) 系統，不管是哪一種的發行版本都會附上的，但可能會有不易入門的感覺，一旦抓到到了訣竅，這是不假外求的工具。因此，在這篇文章裡頭，會對這些原生的繪圖工具多做一些說明。這裡所提到的原生繪圖工具，另外一個好處就是可以使用 CJK 環境，意思當然就是說可以在圖中插入中文及 \(\LaTeX\) 排版後的結果，這恐怕是許多使用者希望的功能，但一般 GUI 式的繪圖工具就常常無法完整支援了。</description></item><item><title>第 10 章：數學排版</title><link>https://textw.github.io/LaTeX123/docs/math/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/math/</guid><description>10. 數學排版 # 好啦！這章是 \(\LaTeX\) 的拿手把戲了。就讓我們就來見識一下 \(\LaTeX\) 的威力吧！光這一章的內容就可以寫一本厚厚的書了，所以，只能點到為止，先小酌一番。這一章的內容，他們排版精確性，以 PDF 格式的內容為準，HTML 格式的內容，僅供參考。
對於較複雜的數學式子，除非是自行定義巨集，否則 \(\LaTeX\) 內建所提供的排版數學式子的能力可能會有不足，這時可以使用美國數學協會所開發的 AmS-LaTeX 巨集套件，目前所有的 \(\TeX\) 發行版本應該都會附上，而且也會附上另一套 AMSFonts 巨集套件及其字型。這個套件的使用，這裡並不做詳細的說明，只在必要的時候附帶提及，可以另外參考系統上所附的 amsldoc.dvi 文件及 The LaTeX Companion 這本書第八章，這個部份網路上可以抓得到，檔名是 ch8.pdf，CTAN 有收錄：
http://www.ctan.org/tex-archive/info/companion-rev/ch8.pdf 10.1 進入數學模式（math mode）的方法 # 我們平常寫文章的模式無法正確處理數學式子間的空間位置，而且要鍵入次方、方根、積分……等等符號，會有困難，因此，所有的數學式子都得進入數學模式來處理。在數學模式下，不僅大部份文字、符號會採用斜體字，而且空間會另做安排，額外的空白會被 \(\LaTeX\) 忽略，在數學模式中要鍵入一般的正常文字，要退出數學模式，或者由 \mbox{} 或 \textmr{} 包圍起來才行。
\(\LaTeX\) 的數學模式有兩種，一種是和內文排列在一起的隨文數式（math inline mode），他是和一般正常文字混在一起排版的；另外一種是獨立的展式數式（math display mode），他會單獨成一行，而且上下會和正常文字有一定的空間來區隔。
10.1.1 隨文數式（math inline mode） # 這是在夾雜在一般文章內的數學式子，是隨著整個文章段落一起排版的。</description></item><item><title>第 11 章：一篇文章、一本書的完整結構</title><link>https://textw.github.io/LaTeX123/docs/abook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/abook/</guid><description>11. 一篇文章、一本書的完整結構 # 好了，寫文章最後也要整理成冊，這也是排版系統要負責的部份。如果只是簡單幾百、幾千字的小文章，那很容易，只要個文章題目，章節標題，那也就夠了。但如果是較正式的論文，那可能還有目錄、參考文獻、索引……等等，甚至一本書籍的話，也要有個封面，及送印刷廠時要用到的裁切記號（crop marks）。如果要置放在網頁上的，那還得注意網路超連結互動的問題，所以，這些細節算是滿瑣碎的，但卻是必要的。
當然，個人也並不是什麼排版、印刷的專家，只能談談我所知道的事項，如果需要補充或修正，請有這方面經驗的朋友，不吝提供心得及指正。個人出版，這實際上不是夢，尤其網路發達的今日。
11.1 目錄（Contents） # 目錄的問題，如果不講究的話，使用 \(\LaTeX\) 預設的就行了。就像第 4.4 節所舉的例子一樣。但如果要做調整的話，除非熟悉 \(\LaTeX\) 巨集的寫法、定義，否則就得使用現成的巨集套件，例如 minitoc 可讓目錄更緊湊，titletoc 更可做相當幅度的調整及美化。
在 \(\LaTeX\) 文稿內，\tablofcontents 可以排版一般的章節目錄。\listoffigures 指令可以排版圖目錄，\listoftables 指令則可排版表目錄。但圖表的話是指有進入浮動環境，使用 \caption 指令，有編號的圖表而言。請注意，這些目錄指令的置放位置會影響實際目錄出現的順序，沒有特殊需求的話，一般的順序是文、圖、表。
11.1.1 更改目錄標題名稱 # 預設的情形下，在目錄開頭都會有個標題來引導，例如：Contents、List of Figueres 及 List of Tables 等，但是這在中文的情形看起來會不相稱，我們可以去更改預設值。更改 \(\LaTeX\) 預設值得視原來這個值是以什麼形式出現，在目錄是以指令定義的形式出現，所以我們要使用 \renewcommand 這個指令去重定義他。
原來的這些 Contents 標題是怎麼「弄」出來的呢？如果手頭上沒有相當的參考書籍，可以參考他的原始定義，例如這篇文章是使用 report class，那麼找一下：
/usr/share/texmf/tex/latex/base/report.cls % Unix-like 系統 C:\texmf\tex\latex\base\report.cls % DOS/Windows 系統 這個檔（依安裝的地方不同，可能會有不同的路徑），搜尋 Contents 這個關鍵字，就可以發現，他們原來的定義是：</description></item><item><title>第 12 章：後記</title><link>https://textw.github.io/LaTeX123/docs/theend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/theend/</guid><description>12. 後記 # 大概簡單介紹了 \(\LaTeX\) 的使用，這樣夠用了嗎？很可能是不夠的，尤其是想變動風格的時候，但一般使用，不講求花俏，應該可以用了，剩下的只是熟練的問題。當然，許多細節可能並沒有說明清楚，但方向知道了，其他的自行查閱就行了。真碰到問題時，可以到 bbs/news 上詢問。
有許多沒有提及的東西，在這一章交代一下，有些是可以自行查閱的，有些則是尚未成熟，可能還不到真正實用的階段（也可能是我自己也不會用啦！:）。
微調
由於微調牽涉到對 \(\LaTeX\) macro 的一定程度的認識，因此並沒有說明得很清楚，理想的話應該先把 \(\TeX/\LaTeX\) 巨集的寫法先做簡單的介紹，這個部份可能另外專文介紹較妥，畢竟這篇文件是定位在入門級教材。
中文的處理
中文的處理還有很多模糊地帶，例如，索引、參考文獻及中文直排。目前的其他中文 \(\TeX/\LaTeX\) 也沒有介紹，例如 ChiTeX、cwTeX 及 PUTeX 等等。
\(\TeX/\LaTeX\) 系統的字型機制算是較複雜，安裝字型更是一般使用者的夢魘，英文寫作比較容易解決，通常系統上都會安裝好，中文的話就比較麻煩，除了詳細去介紹外，我們使用中文字型應該有個大家認同的規格才行，否則我這份文件拿到其他的中文 \(\TeX/\LaTeX\) 系統上的時候，就必須修改一下，至少換個字型名稱才能順利編譯。
實例嫌不夠完整
尤其是表格、圖形處理及數理排版的部份，並沒有交待得很完整。這裡頭當然牽涉到許多的背景知識的問題，不單純在排版本身，這在其他的排版系統一樣會碰到同樣的情況。當然，有很大的部份是我個人經驗不足的關係啦！:-)
各種檔案格式的介紹
\(\TeX/\LaTeX\) 系統中的檔案格式多如牛毛，包括一些中間產生的檔案都有他特定的目的，但我們並沒有多做介紹。原因是，這些檔案都牽涉到他的運作機制，這麼一來連運作機制也要說明才行，這樣會使篇幅大增，而且也會擾亂了初學者的學習步調，因此，只能留待往後有機會再來介紹。
現有巨集庫的整理
\(\LaTeX\) 的巨集實在是太多了，現有資料大多是英文的，是有必要整理出一份有系統的中文速查表，以免重複去製造輪子。
重音符號、歐洲字元
這些都沒有真正接觸到。這些內容，個人不敢造次，因為並不很熟悉，因此，得要有懂歐洲語系的朋友來個完整的介紹才行。
Unicode 編碼文件的處理</description></item><item><title>第 13 章：GNU 自由文件許可證原文</title><link>https://textw.github.io/LaTeX123/docs/fdl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textw.github.io/LaTeX123/docs/fdl/</guid><description>13. GNU 自由文件許可證原文 # GNU Free Documentation License Version 1.2, November 2002 Copyright © 2000,2001,2002 Free Software Foundation, Inc. 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.
0. PREAMBLE # The purpose of this License is to make a manual, textbook, or other functional and useful document ``free'' in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially.</description></item></channel></rss>